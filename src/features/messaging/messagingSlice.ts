import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { LanguageShortName } from '../../app/supportedLanguages';
import { MessageModel } from './MessageModel';
import { fetchTranslation } from './messagingAPI';

export interface MessagingState {
  messages: MessageModel[];
  currentSelectedLanguage: LanguageShortName
}

const initialState: MessagingState = {
  messages: [],
  currentSelectedLanguage: "fr"
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getTranslationAsync = createAsyncThunk(
  'messaging/translate',
  async (message: string) => {
    const response = await fetchTranslation(message);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const messagingSlice = createSlice({
  name: 'messaging',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    postMessage: {
        reducer: (state, action: PayloadAction<MessageModel>) => {
            state.messages = [...state.messages, action.payload]
        },
        prepare: (value: string) => {
            const date: number = new Date().getTime()
            const lang : LanguageShortName = 'fr'
            //const messageData = new MessageModel(message, 'fr')
            return { payload: { value, lang, date} }
        }
    },
    changeLanguage: (state, action: PayloadAction<LanguageShortName>) => {
        state.currentSelectedLanguage = action.payload
    },
    /*changeLanguage: {
        reducer: (state, action: PayloadAction<LanguageShortName>) => {

        },
        prepare: (lang: )
        
    },*/
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getTranslationAsync.pending, (state) => {
        //state.status = 'loading';
      })
      .addCase(getTranslationAsync.fulfilled, (state, action) => {
        //state.status = 'idle';
        //state.value += action.payload;
      });
  },
});

export const { postMessage, changeLanguage } = messagingSlice.actions;


export const selectCurrentLanguage = (state: RootState) => state.messaging.currentSelectedLanguage;
// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectAllMessages = (state: RootState) => state.messaging.messages;

export const selectTranslatedMessages = (state: RootState) => state.messaging.messages.filter((message) => {
    //const isSelectedCategory = state.movie.selectedCategories.includes(movie.category)

    //message.
  
    //return isSelectedCategory ? me : false
});

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
/*export const incrementIfOdd = (amount: number): AppThunk => (
  dispatch,
  getState
) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};*/

export default messagingSlice.reducer;
